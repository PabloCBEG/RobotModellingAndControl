% -------------------------------------------------
% APARTADO A4 - Cinemática Inversa numérica
% -------------------------------------------------

% IMPORTANTE: ESTA FUNCIÓN DEBE DEVOLVER UN VECTOR/MATRIZ NUMÉRICO q
% CUANDO RECIBE DE ENTRADA UN VECTOR TAMBIÉN NUMÉRICO CON LA POSICIÓN EN 
% CARTESIANAS DEL EXTREMO DE LA ARTICULACIÓN 3, (x,y,z)
% EN CASO DE MÚLTIPLES SOLUCIONES, EL RESULTADO SERÁ UNA MATRIZ q, DE MODO
% QUE CADA COLUMNA REPRESENTA UNA POSIBLE SOLUCIÓN.

function q = CinematicaInversa_mejor(in)
x = in(1);           % Posición cartesianas
y = in(2);           % 
z = in(3);           % 

% ------ SOLO DEBE ALTERAR LAS EXPRESIONES ENTRE ESTAS LÍNEAS ----------
% SUSTITUYA los valores L0, L1, etc por sus valores numéricos
L0 = 1;
L1 = 0.5;
L2 = 1;
L3A = 1;
L3B = 0.5;
% L3 = sqrt(L3A^2 + L3B^2);

A = L1 + L3B;
R = sqrt((L0 - z)^2 + y^2);
% alpha = atan2(y, L0 - z);

% Escriba a continuación las expresiones numéricas de su cinemática
% inversa. Si hay varias soluciones posibles, expréselas como vectores para
% cada componente por separado. De este modo, la primera solución sería q1(1), q2(1),
% q3(1), la segunda solución q1(2), q2(2), q3(2), etc.

s2a = (-2*x*L2 + sqrt(4*x^2*L2^2 - 4*(x^2 + (R^2 - A^2))*(L2^2 - (R^2 - A^2))))/(2*(x^2 + (R^2 - A^2)));
s2b = (-2*x*L2 - sqrt(4*x^2*L2^2 - 4*(x^2 + (R^2 - A^2))*(L2^2 - (R^2 - A^2))))/(2*(x^2 + (R^2 - A^2)));

if(abs(s2a) < 1e-12) s2a = 0;
elseif (abs(s2a) > 1)
        s2b = 0;
        fprintf('Error en el calculo de sin(q2): solucion no valida');
end
if(abs(s2b) < 1e-12) s2b = 0;
elseif (abs(s2b) > 1) 
        s2b = 0;
        fprintf('Error en el calculo de sin(q2): solucion no valida');
end

c2a = sqrt(1 - s2a^2);
c2b = -sqrt(1 - s2a^2);
c2c = sqrt(1 - s2b^2);
c2d = -sqrt(1 - s2b^2);

if(abs(c2a) < 1e-12) c2a = 0; end
if(abs(c2b) < 1e-12) c2b = 0; end
if(abs(c2c) < 1e-12) c2c = 0; end
if(abs(c2d) < 1e-12) c2d = 0; end


q2 = [atan2(s2a,c2a),atan2(s2a,c2b),atan2(s2b,c2c),atan2(s2b,c2d)];
%   q3(1,:) = (-x - L2*sin(q2(1,:)))/cos(q2(1,:)) - L3A;
q3(1) = (-x - L2*sin(q2(1)))/cos(q2(1)) - L3A;
q3(2) = (-x - L2*sin(q2(2)))/cos(q2(2)) - L3A;
q3(3) = (-x - L2*sin(q2(3)))/cos(q2(3)) - L3A;
q3(4) = (-x - L2*sin(q2(4)))/cos(q2(4)) - L3A;

    for i=1:4
        if(q2(i) == 0)
            c1 = (-y + sqrt(y^2 - ((z - 1)^2 + y^2)*(1 - (z - 1)^2)))/((z - 1)^2 +y^2);%or -sqrt
            s1 = sqrt(1 - c1^2);% or -sqrt
            q1(i) = atan2(s1,c1);
        else
            c1(i) = (L3A + q3(i) + x*cos(q2(i)) + ((y*sin(q2(i)))/(z - L0))*...
                (L3B + L1))/((L0 - z)*sin(q2(i)) - (y^2*sin(q2(i)))/(z - L0));
            if(abc1(i))
            s1(i) = (-L3B - L1 -y*c1(i))/(z - L0);
            q1(i) = atan2(s1(i),c1(i));
        end
    end

    

% ----------------------------------------------------------------------  
% Variables de salida. No las modifique.
q=[q1;q2;q3];
end